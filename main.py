import cv2
import numpy as np
import time

# 4?? ??? ??? URL (IP? ??? ??? ?? ?????)
camera_urls = [
    "http://10.0.0.81/stream",  # ?? ??
    "http://10.0.0.82/stream",  # ?? ?? ? ???
    "http://10.0.0.83/stream",  # ?? ?? ? ???
    "http://10.0.0.84/stream"   # ?? ?? ? ???
]

# ? ??? ??? ?? (URL? VideoCapture ??)
cameras = []
for url in camera_urls:
    cap = cv2.VideoCapture(url, cv2.CAP_FFMPEG)
    cameras.append({"url": url, "cap": cap, "last_try": time.time()})

# ? ?? ??? ?? (???? ?? ??)
frame_width, frame_height = 640, 480

def reinitialize_camera(camera):
    """??? ??? ??: ?? ??? ???"""
    print(f"??? ??: {camera['url']}")
    # ??? ?? ??? ??? ? ?? ??
    try:
        camera["cap"].release()
    except:
        pass
    camera["cap"] = cv2.VideoCapture(camera["url"], cv2.CAP_FFMPEG)
    camera["last_try"] = time.time()

def get_frame(camera):
    cap = camera["cap"]
    # ?? ?? ??? ???? ??? ??? (?? 5? ??)
    if not cap.isOpened() and (time.time() - camera["last_try"] > 5):
        reinitialize_camera(camera)
    try:
        ret, frame = cap.read()
    except Exception as e:
        print("??? ?? ??:", e)
        ret = False
    if not ret or frame is None:
        # ??? ?? ?? ? ??? ? ??? ??
        frame = np.zeros((frame_height, frame_width, 3), dtype=np.uint8)
    else:
        frame = cv2.resize(frame, (frame_width, frame_height))
    return frame

# ?? ?? ??? ? ??
cv2.namedWindow("4 Camera Streams", cv2.WINDOW_NORMAL)
cv2.setWindowProperty("4 Camera Streams", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

while True:
    # ? ????? ??? ???? (??? ?? ??)
    frames = [get_frame(cam) for cam in cameras]

    # 4?? ?? ??: ?? ?? ?? ?
    top_row = cv2.hconcat([frames[0], frames[1]])
    bottom_row = cv2.hconcat([frames[2], frames[3]])
    combined = cv2.vconcat([top_row, bottom_row])

    # ?? ?? ??? ??? ?? (?? ?, ?? 2)
    combined_with_lines = combined.copy()
    height, width = combined_with_lines.shape[:2]
    # ?? ??? (?? ???)
    cv2.line(combined_with_lines, (width//2, 0), (width//2, height), (255, 255, 255), thickness=2)
    # ?? ??? (?? ???)
    cv2.line(combined_with_lines, (0, height//2), (width, height//2), (255, 255, 255), thickness=2)

    cv2.imshow("4 Camera Streams", combined_with_lines)
    # 'q'? ??? ??
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# ?? ? ? ?? ?? ??
for cam in cameras:
    cam["cap"].release()
cv2.destroyAllWindows()
